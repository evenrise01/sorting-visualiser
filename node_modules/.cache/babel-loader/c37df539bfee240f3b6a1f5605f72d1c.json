{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\ITS Project\\\\Sorting-Visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js';\nimport './SortingVisualizer.css'; // Value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 4; // Value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 270; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730)); //if we use 1 instead of 5, we will barely see it on the screen, Also duplicate values are allowed\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [barOne, barTwo, change] = animations[i];\n\n      if (!change) {\n        const barOneStyle = arrayBars[barOne].style;\n        const barTwoStyle = arrayBars[barTwo].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOne].style;\n          barOneStyle.height = `${barTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      // arrayBars holds all bars in array\n      // animations[i] is each pair of bars being compared\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [pivotBar, compBar, change] = animations[i]; //If a swap is not committed, we just highlight the pivot and the value we're comparing to\n\n      if (!change) {\n        const pivotBarStyle = arrayBars[pivotBar].style;\n        const compBarStyle = arrayBars[compBar].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          pivotBarStyle.backgroundColor = color;\n          compBarStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        // This is the case where a swap is happening. Simply set the bar's height to the second bar\n        setTimeout(() => {\n          const pivotBarStyle = arrayBars[pivotBar].style;\n          pivotBarStyle.height = `${compBar}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } // Below two animations follow same structure as above (names of bar different for clarity)\n\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [barOne, barTwo, change] = animations[i];\n\n      if (!change) {\n        const barOneStyle = arrayBars[barOne].style;\n        const barTwoStyle = arrayBars[barTwo].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOne].style;\n          barOneStyle.height = `${barTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getHeapSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","bubbleSort","barOne","barTwo","change","quickSort","pivotBar","compBar","pivotBarStyle","compBarStyle","heapSort","render","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js';\n\n\n\nimport './SortingVisualizer.css';\n\n// Value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 4;\n\n// Value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 270;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730)); //if we use 1 instead of 5, we will barely see it on the screen, Also duplicate values are allowed\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [barOne, barTwo, change] = animations[i];\n      if (!change) {\n        const barOneStyle = arrayBars[barOne].style;\n        const barTwoStyle = arrayBars[barTwo].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOne].style;\n          barOneStyle.height = `${barTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      // arrayBars holds all bars in array\n      // animations[i] is each pair of bars being compared\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [pivotBar, compBar, change] = animations[i];\n      //If a swap is not committed, we just highlight the pivot and the value we're comparing to\n      if (!change) {\n        const pivotBarStyle = arrayBars[pivotBar].style;\n        const compBarStyle = arrayBars[compBar].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          pivotBarStyle.backgroundColor = color;\n          compBarStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        // This is the case where a swap is happening. Simply set the bar's height to the second bar\n        setTimeout(() => {\n          const pivotBarStyle = arrayBars[pivotBar].style;\n          pivotBarStyle.height = `${compBar}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // Below two animations follow same structure as above (names of bar different for clarity)\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [barOne, barTwo, change] = animations[i];\n      if (!change) {\n        const barOneStyle = arrayBars[barOne].style;\n        const barTwoStyle = arrayBars[barTwo].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOne].style;\n          barOneStyle.height = `${barTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        {/* <button onClick={() => this.SelectionSort()}>Selection Sort</button> */}\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}