{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations; /// deep copy the array without copying the color field\n\n  const auxiliaryArray = new Array(array.length);\n\n  for (let i = 0; i < array.length; ++i) auxiliaryArray[i] = array[i].height;\n\n  quickSort(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(array, left, right, animations) {\n  if (left < right) {\n    const index = partition(array, left, right, animations);\n    quickSort(array, left, index - 1, animations);\n    quickSort(array, index + 1, right, animations);\n  }\n}\n\nfunction partition(array, left, right, animations) {\n  /// 'color' means we change the color of the two indexes in the main array\n  /// 'revert' means we revert the color change\n  /// 'swap' means we swap the two indexes in the main array\n  let index = left;\n  const pivot = array[right];\n\n  for (let i = left; i < right; ++i) {\n    animations.push([index, i, 'color']);\n    animations.push([index, i, 'revert']);\n\n    if (arr[i] <= pivot) {\n      animations.push([index, i, 'swap']);\n      [array[index], array[i]] = [array[i], array[index]];\n      index++;\n    }\n  }\n\n  animations.push([index, right, 'color']);\n  animations.push([index, right, 'revert']);\n  animations.push([index, right, 'swap']);\n  [array[index], array[right]] = [array[right], array[index]];\n  return index;\n}","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/sortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","length","auxiliaryArray","Array","i","height","quickSort","left","right","index","partition","pivot","push","arr"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAE1C,QAAMC,UAAU,GAAG,EAAnB;AAEA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EACI,OAAOD,UAAP,CALsC,CAO1C;;AACA,QAAME,cAAc,GAAG,IAAIC,KAAJ,CAAUJ,KAAK,CAACE,MAAhB,CAAvB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACE,MAA1B,EAAkC,EAAEG,CAApC,EACIF,cAAc,CAACE,CAAD,CAAd,GAAoBL,KAAK,CAACK,CAAD,CAAL,CAASC,MAA7B;;AAEJC,EAAAA,SAAS,CAACJ,cAAD,EAAiB,CAAjB,EAAoBA,cAAc,CAACD,MAAf,GAAwB,CAA5C,EAA+CD,UAA/C,CAAT;AACA,SAAOA,UAAP;AACH;;AAED,SAASM,SAAT,CAAmBP,KAAnB,EAA0BQ,IAA1B,EAAgCC,KAAhC,EAAuCR,UAAvC,EAAmD;AAC/C,MAAIO,IAAI,GAAGC,KAAX,EAAkB;AACd,UAAMC,KAAK,GAAGC,SAAS,CAACX,KAAD,EAAQQ,IAAR,EAAcC,KAAd,EAAqBR,UAArB,CAAvB;AACAM,IAAAA,SAAS,CAACP,KAAD,EAAQQ,IAAR,EAAcE,KAAK,GAAG,CAAtB,EAAyBT,UAAzB,CAAT;AACAM,IAAAA,SAAS,CAACP,KAAD,EAAQU,KAAK,GAAG,CAAhB,EAAmBD,KAAnB,EAA0BR,UAA1B,CAAT;AACH;AACJ;;AAED,SAASU,SAAT,CAAmBX,KAAnB,EAA0BQ,IAA1B,EAAgCC,KAAhC,EAAuCR,UAAvC,EAAmD;AAE/C;AACA;AACA;AAEA,MAAIS,KAAK,GAAGF,IAAZ;AACA,QAAMI,KAAK,GAAGZ,KAAK,CAACS,KAAD,CAAnB;;AAEA,OAAK,IAAIJ,CAAC,GAAGG,IAAb,EAAmBH,CAAC,GAAGI,KAAvB,EAA8B,EAAEJ,CAAhC,EAAmC;AAC/BJ,IAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQL,CAAR,EAAW,OAAX,CAAhB;AACAJ,IAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQL,CAAR,EAAW,QAAX,CAAhB;;AAEA,QAAIS,GAAG,CAACT,CAAD,CAAH,IAAUO,KAAd,EAAqB;AACjBX,MAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQL,CAAR,EAAW,MAAX,CAAhB;AACA,OAACL,KAAK,CAACU,KAAD,CAAN,EAAeV,KAAK,CAACK,CAAD,CAApB,IAA2B,CAACL,KAAK,CAACK,CAAD,CAAN,EAAWL,KAAK,CAACU,KAAD,CAAhB,CAA3B;AACAA,MAAAA,KAAK;AACR;AACJ;;AAEDT,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,OAAf,CAAhB;AACAR,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,QAAf,CAAhB;AACAR,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,MAAf,CAAhB;AAEA,GAACT,KAAK,CAACU,KAAD,CAAN,EAAeV,KAAK,CAACS,KAAD,CAApB,IAA+B,CAACT,KAAK,CAACS,KAAD,CAAN,EAAeT,KAAK,CAACU,KAAD,CAApB,CAA/B;AACA,SAAOA,KAAP;AACH","sourcesContent":["export function getQuickSortAnimations(array) {\r\n\r\n    const animations = [];\r\n\r\n    if (array.length <= 1)\r\n        return animations;\r\n\r\n    /// deep copy the array without copying the color field\r\n    const auxiliaryArray = new Array(array.length);\r\n    for (let i = 0; i < array.length; ++i)\r\n        auxiliaryArray[i] = array[i].height;\r\n\r\n    quickSort(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(array, left, right, animations) {\r\n    if (left < right) {\r\n        const index = partition(array, left, right, animations);\r\n        quickSort(array, left, index - 1, animations);\r\n        quickSort(array, index + 1, right, animations);\r\n    }\r\n}\r\n\r\nfunction partition(array, left, right, animations) {\r\n\r\n    /// 'color' means we change the color of the two indexes in the main array\r\n    /// 'revert' means we revert the color change\r\n    /// 'swap' means we swap the two indexes in the main array\r\n\r\n    let index = left;\r\n    const pivot = array[right];\r\n\r\n    for (let i = left; i < right; ++i) {\r\n        animations.push([index, i, 'color']);\r\n        animations.push([index, i, 'revert']);\r\n\r\n        if (arr[i] <= pivot) {\r\n            animations.push([index, i, 'swap']);\r\n            [array[index], array[i]] = [array[i], array[index]];\r\n            index++;\r\n        }\r\n    }\r\n\r\n    animations.push([index, right, 'color']);\r\n    animations.push([index, right, 'revert']);\r\n    animations.push([index, right, 'swap']);\r\n\r\n    [array[index], array[right]] = [array[right], array[index]];\r\n    return index;\r\n}"]},"metadata":{},"sourceType":"module"}