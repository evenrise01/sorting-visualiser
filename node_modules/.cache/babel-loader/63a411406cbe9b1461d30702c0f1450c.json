{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (arraylength <= 1) return animations; /// deep copy the array without copying the color field\n\n  const auxiliaryArray = new Array(arraylength);\n\n  for (let i = 0; i < arraylength; ++i) auxiliaryArray[i] = arr[i].height;\n\n  quickSort(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(arr, left, right, animations) {\n  if (left < right) {\n    const index = partition(arr, left, right, animations);\n    quickSort(arr, left, index - 1, animations);\n    quickSort(arr, index + 1, right, animations);\n  }\n}\n\nfunction partition(arr, left, right, animations) {\n  /// 'color' means we change the color of the two indexes in the main array\n  /// 'revert' means we revert the color change\n  /// 'swap' means we swap the two indexes in the main array\n  let index = left;\n  const pivot = arr[right];\n\n  for (let i = left; i < right; ++i) {\n    animations.push([index, i, 'color']);\n    animations.push([index, i, 'revert']);\n\n    if (arr[i] <= pivot) {\n      animations.push([index, i, 'swap']);\n      [arr[index], arr[i]] = [arr[i], arr[index]];\n      index++;\n    }\n  }\n\n  animations.push([index, right, 'color']);\n  animations.push([index, right, 'revert']);\n  animations.push([index, right, 'swap']);\n  [arr[index], arr[right]] = [arr[right], arr[index]];\n  return index;\n}","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/sortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","arraylength","auxiliaryArray","Array","i","arr","height","quickSort","length","left","right","index","partition","pivot","push"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAE1C,QAAMC,UAAU,GAAG,EAAnB;AAEA,MAAIC,WAAW,IAAI,CAAnB,EACI,OAAOD,UAAP,CALsC,CAO1C;;AACA,QAAME,cAAc,GAAG,IAAIC,KAAJ,CAAUF,WAAV,CAAvB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiC,EAAEG,CAAnC,EACIF,cAAc,CAACE,CAAD,CAAd,GAAoBC,GAAG,CAACD,CAAD,CAAH,CAAOE,MAA3B;;AAEJC,EAAAA,SAAS,CAACL,cAAD,EAAiB,CAAjB,EAAoBA,cAAc,CAACM,MAAf,GAAwB,CAA5C,EAA+CR,UAA/C,CAAT;AACA,SAAOA,UAAP;AACH;;AAED,SAASO,SAAT,CAAmBF,GAAnB,EAAwBI,IAAxB,EAA8BC,KAA9B,EAAqCV,UAArC,EAAiD;AAC7C,MAAIS,IAAI,GAAGC,KAAX,EAAkB;AACd,UAAMC,KAAK,GAAGC,SAAS,CAACP,GAAD,EAAMI,IAAN,EAAYC,KAAZ,EAAmBV,UAAnB,CAAvB;AACAO,IAAAA,SAAS,CAACF,GAAD,EAAMI,IAAN,EAAYE,KAAK,GAAG,CAApB,EAAuBX,UAAvB,CAAT;AACAO,IAAAA,SAAS,CAACF,GAAD,EAAMM,KAAK,GAAG,CAAd,EAAiBD,KAAjB,EAAwBV,UAAxB,CAAT;AACH;AACJ;;AAED,SAASY,SAAT,CAAmBP,GAAnB,EAAwBI,IAAxB,EAA8BC,KAA9B,EAAqCV,UAArC,EAAiD;AAE7C;AACA;AACA;AAEA,MAAIW,KAAK,GAAGF,IAAZ;AACA,QAAMI,KAAK,GAAGR,GAAG,CAACK,KAAD,CAAjB;;AAEA,OAAK,IAAIN,CAAC,GAAGK,IAAb,EAAmBL,CAAC,GAAGM,KAAvB,EAA8B,EAAEN,CAAhC,EAAmC;AAC/BJ,IAAAA,UAAU,CAACc,IAAX,CAAgB,CAACH,KAAD,EAAQP,CAAR,EAAW,OAAX,CAAhB;AACAJ,IAAAA,UAAU,CAACc,IAAX,CAAgB,CAACH,KAAD,EAAQP,CAAR,EAAW,QAAX,CAAhB;;AAEA,QAAIC,GAAG,CAACD,CAAD,CAAH,IAAUS,KAAd,EAAqB;AACjBb,MAAAA,UAAU,CAACc,IAAX,CAAgB,CAACH,KAAD,EAAQP,CAAR,EAAW,MAAX,CAAhB;AACA,OAACC,GAAG,CAACM,KAAD,CAAJ,EAAaN,GAAG,CAACD,CAAD,CAAhB,IAAuB,CAACC,GAAG,CAACD,CAAD,CAAJ,EAASC,GAAG,CAACM,KAAD,CAAZ,CAAvB;AACAA,MAAAA,KAAK;AACR;AACJ;;AAEDX,EAAAA,UAAU,CAACc,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,OAAf,CAAhB;AACAV,EAAAA,UAAU,CAACc,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,QAAf,CAAhB;AACAV,EAAAA,UAAU,CAACc,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,MAAf,CAAhB;AAEA,GAACL,GAAG,CAACM,KAAD,CAAJ,EAAaN,GAAG,CAACK,KAAD,CAAhB,IAA2B,CAACL,GAAG,CAACK,KAAD,CAAJ,EAAaL,GAAG,CAACM,KAAD,CAAhB,CAA3B;AACA,SAAOA,KAAP;AACH","sourcesContent":["export function getQuickSortAnimations(array) {\r\n\r\n    const animations = [];\r\n\r\n    if (arraylength <= 1)\r\n        return animations;\r\n\r\n    /// deep copy the array without copying the color field\r\n    const auxiliaryArray = new Array(arraylength);\r\n    for (let i = 0; i < arraylength; ++i)\r\n        auxiliaryArray[i] = arr[i].height;\r\n\r\n    quickSort(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(arr, left, right, animations) {\r\n    if (left < right) {\r\n        const index = partition(arr, left, right, animations);\r\n        quickSort(arr, left, index - 1, animations);\r\n        quickSort(arr, index + 1, right, animations);\r\n    }\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n\r\n    /// 'color' means we change the color of the two indexes in the main array\r\n    /// 'revert' means we revert the color change\r\n    /// 'swap' means we swap the two indexes in the main array\r\n\r\n    let index = left;\r\n    const pivot = arr[right];\r\n\r\n    for (let i = left; i < right; ++i) {\r\n        animations.push([index, i, 'color']);\r\n        animations.push([index, i, 'revert']);\r\n\r\n        if (arr[i] <= pivot) {\r\n            animations.push([index, i, 'swap']);\r\n            [arr[index], arr[i]] = [arr[i], arr[index]];\r\n            index++;\r\n        }\r\n    }\r\n\r\n    animations.push([index, right, 'color']);\r\n    animations.push([index, right, 'revert']);\r\n    animations.push([index, right, 'swap']);\r\n\r\n    [arr[index], arr[right]] = [arr[right], arr[index]];\r\n    return index;\r\n}"]},"metadata":{},"sourceType":"module"}