{"ast":null,"code":"function swap(arr, val1, val2) {\n  let temp = arr[val2];\n  arr[val2] = arr[val1];\n  arr[val1] = temp;\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doQuickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction doQuickSort(array, lowIndex, highIndex, animations) {\n  if (lowIndex >= highIndex) return;\n  let pivot = getPivot(array, lowIndex, highIndex, animations);\n  doQuickSort(array, lowIndex, pivot - 1, animations);\n  doQuickSort(array, pivot + 1, highIndex, animations);\n} //This is the function to find the partition the array through pivot points\n\n\nfunction getPivot(array, lowIndex, highIndex, animations) {\n  // Standard quicksort, we set our last element to be our pivot value\n  // Pivot index is where the pivot value belongs in the array once sorted\n  let pivotIdx = lowIndex;\n  let pivotVal = array[highIndex]; // Iterate through the list, note we use lowIndex as the starting index (For recursive calls)\n\n  for (let i = lowIndex; i < highIndex; i++) {\n    //Push the animation twice, Once to highlight it, second to reset color\n    animations.push([pivotIdx, i, false]);\n    animations.push([pivotIdx, i, false]); //If the current value is less than the pivot value, than we increment pivot index\n\n    if (array[i] < pivotVal) {\n      //Push two animations to swap bar heights (Use true to indicate a change)\n      animations.push([pivotIdx, array[i], true]);\n      animations.push([i, array[pivotIdx], true]);\n      swap(array, i, pivotIdx);\n      pivotIdx++;\n    }\n  } //Once we reach the end, we highlight the pivot values determined index and the original index\n  //Reset the colors and commit the swap in bar heights\n\n\n  animations.push([pivotIdx, highIndex, false]);\n  animations.push([pivotIdx, highIndex, false]);\n  animations.push([pivotIdx, array[highIndex], true]);\n  animations.push([highIndex, array[pivotIdx], true]);\n  swap(array, pivotIdx, highIndex);\n  return pivotIdx;\n}","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/sortingAlgorithms/QuickSort.js"],"names":["swap","arr","val1","val2","temp","getQuickSortAnimations","array","animations","length","doQuickSort","lowIndex","highIndex","pivot","getPivot","pivotIdx","pivotVal","i","push"],"mappings":"AAAA,SAASA,IAAT,CAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AAC3B,MAAIC,IAAI,GAAGH,GAAG,CAACE,IAAD,CAAd;AACAF,EAAAA,GAAG,CAACE,IAAD,CAAH,GAAYF,GAAG,CAACC,IAAD,CAAf;AACAD,EAAAA,GAAG,CAACC,IAAD,CAAH,GAAYE,IAAZ;AACH;;AACD,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBG,EAAAA,WAAW,CAACH,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BD,UAA7B,CAAX;AACA,SAAOA,UAAP;AACH;;AACD,SAASE,WAAT,CAAqBH,KAArB,EAA4BI,QAA5B,EAAsCC,SAAtC,EAAiDJ,UAAjD,EAA6D;AACzD,MAAIG,QAAQ,IAAIC,SAAhB,EAA2B;AAC3B,MAAIC,KAAK,GAAGC,QAAQ,CAACP,KAAD,EAAQI,QAAR,EAAkBC,SAAlB,EAA6BJ,UAA7B,CAApB;AACAE,EAAAA,WAAW,CAACH,KAAD,EAAQI,QAAR,EAAkBE,KAAK,GAAG,CAA1B,EAA6BL,UAA7B,CAAX;AACAE,EAAAA,WAAW,CAACH,KAAD,EAAQM,KAAK,GAAG,CAAhB,EAAmBD,SAAnB,EAA8BJ,UAA9B,CAAX;AACH,C,CACD;;;AACA,SAASM,QAAT,CAAkBP,KAAlB,EAAyBI,QAAzB,EAAmCC,SAAnC,EAA8CJ,UAA9C,EAA0D;AACtD;AACA;AACA,MAAIO,QAAQ,GAAGJ,QAAf;AACA,MAAIK,QAAQ,GAAGT,KAAK,CAACK,SAAD,CAApB,CAJsD,CAKtD;;AACA,OAAK,IAAIK,CAAC,GAAGN,QAAb,EAAuBM,CAAC,GAAGL,SAA3B,EAAsCK,CAAC,EAAvC,EAA2C;AACvC;AACAT,IAAAA,UAAU,CAACU,IAAX,CAAgB,CAACH,QAAD,EAAWE,CAAX,EAAc,KAAd,CAAhB;AACAT,IAAAA,UAAU,CAACU,IAAX,CAAgB,CAACH,QAAD,EAAWE,CAAX,EAAc,KAAd,CAAhB,EAHuC,CAIvC;;AACA,QAAIV,KAAK,CAACU,CAAD,CAAL,GAAWD,QAAf,EAAyB;AACrB;AACAR,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACH,QAAD,EAAWR,KAAK,CAACU,CAAD,CAAhB,EAAqB,IAArB,CAAhB;AACAT,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACD,CAAD,EAAIV,KAAK,CAACQ,QAAD,CAAT,EAAqB,IAArB,CAAhB;AACAd,MAAAA,IAAI,CAACM,KAAD,EAAQU,CAAR,EAAWF,QAAX,CAAJ;AACAA,MAAAA,QAAQ;AACX;AACJ,GAlBqD,CAmBtD;AACA;;;AACAP,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACH,QAAD,EAAWH,SAAX,EAAsB,KAAtB,CAAhB;AACAJ,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACH,QAAD,EAAWH,SAAX,EAAsB,KAAtB,CAAhB;AACAJ,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACH,QAAD,EAAWR,KAAK,CAACK,SAAD,CAAhB,EAA6B,IAA7B,CAAhB;AACAJ,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACN,SAAD,EAAYL,KAAK,CAACQ,QAAD,CAAjB,EAA6B,IAA7B,CAAhB;AACAd,EAAAA,IAAI,CAACM,KAAD,EAAQQ,QAAR,EAAkBH,SAAlB,CAAJ;AACA,SAAOG,QAAP;AACH","sourcesContent":["function swap(arr, val1, val2) {\r\n    let temp = arr[val2];\r\n    arr[val2] = arr[val1];\r\n    arr[val1] = temp;\r\n}\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    doQuickSort(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction doQuickSort(array, lowIndex, highIndex, animations) {\r\n    if (lowIndex >= highIndex) return;\r\n    let pivot = getPivot(array, lowIndex, highIndex, animations);\r\n    doQuickSort(array, lowIndex, pivot - 1, animations);\r\n    doQuickSort(array, pivot + 1, highIndex, animations);\r\n}\r\n//This is the function to find the partition the array through pivot points\r\nfunction getPivot(array, lowIndex, highIndex, animations) {\r\n    // Standard quicksort, we set our last element to be our pivot value\r\n    // Pivot index is where the pivot value belongs in the array once sorted\r\n    let pivotIdx = lowIndex\r\n    let pivotVal = array[highIndex];\r\n    // Iterate through the list, note we use lowIndex as the starting index (For recursive calls)\r\n    for (let i = lowIndex; i < highIndex; i++) {\r\n        //Push the animation twice, Once to highlight it, second to reset color\r\n        animations.push([pivotIdx, i, false]);\r\n        animations.push([pivotIdx, i, false]);\r\n        //If the current value is less than the pivot value, than we increment pivot index\r\n        if (array[i] < pivotVal) {\r\n            //Push two animations to swap bar heights (Use true to indicate a change)\r\n            animations.push([pivotIdx, array[i], true]);\r\n            animations.push([i, array[pivotIdx], true]);\r\n            swap(array, i, pivotIdx);\r\n            pivotIdx++;\r\n        }\r\n    }\r\n    //Once we reach the end, we highlight the pivot values determined index and the original index\r\n    //Reset the colors and commit the swap in bar heights\r\n    animations.push([pivotIdx, highIndex, false]);\r\n    animations.push([pivotIdx, highIndex, false]);\r\n    animations.push([pivotIdx, array[highIndex], true]);\r\n    animations.push([highIndex, array[pivotIdx], true]);\r\n    swap(array, pivotIdx, highIndex);\r\n    return pivotIdx;\r\n}"]},"metadata":{},"sourceType":"module"}