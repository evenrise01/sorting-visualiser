{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  quickSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction quickSortHelper(mainArray, startIdx, // left\nendIdx, // right\nauxiliaryArray, animations) {\n  var l = startIdx;\n  var r = endIdx - 1;\n  var size = endIdx - startIdx; // getting the size\n\n  if (size > 1) {\n    var pivot = mainArray[Math.floor(Math.random() % size + l)];\n\n    while (l < r) {\n      while (mainArray[r] > pivot && r > l) {\n        r--;\n      }\n\n      while (mainArray[l] < pivot && l <= r) {\n        l++;\n      }\n\n      if (l < r) {\n        swap(mainArray[l], mainArray[r]);\n        l++;\n      }\n\n      if (l < r) {\n        swap(mainArray[l], mainArray[r]);\n        l++;\n      }\n    }\n\n    quickSortHelper(mainArray, startIdx, l);\n    quickSortHelper(mainArray, r, right);\n  }\n\n  if (startIdx === endIdx) return; // If we have same index, that means only one array, return the function\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2); // Our pivot\n\n  quickSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  quickSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n}","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/sortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","length","auxiliaryArray","slice","quickSortHelper","mainArray","startIdx","endIdx","l","r","size","pivot","Math","floor","random","swap","right","middleIdx"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvB,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,cAA7B,EAA6CF,UAA7C,CAAf;AACA,SAAOA,UAAP;AACH;;AAED,SAASI,eAAT,CACIC,SADJ,EAEIC,QAFJ,EAEc;AACVC,MAHJ,EAGY;AACRL,cAJJ,EAKIF,UALJ,EAME;AACE,MAAIQ,CAAC,GAAGF,QAAR;AACA,MAAIG,CAAC,GAAGF,MAAM,GAAG,CAAjB;AACA,MAAIG,IAAI,GAAGH,MAAM,GAAGD,QAApB,CAHF,CAGgC;;AAE9B,MAAII,IAAI,GAAG,CAAX,EAAc;AACV,QAAIC,KAAK,GAAGN,SAAS,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,IAAhB,GAAuBF,CAAlC,CAAD,CAArB;;AACA,WAAOA,CAAC,GAAGC,CAAX,EAAc;AACV,aAAOJ,SAAS,CAACI,CAAD,CAAT,GAAeE,KAAf,IAAwBF,CAAC,GAAGD,CAAnC,EAAsC;AAClCC,QAAAA,CAAC;AACJ;;AACD,aAAOJ,SAAS,CAACG,CAAD,CAAT,GAAeG,KAAf,IAAwBH,CAAC,IAAIC,CAApC,EAAuC;AACnCD,QAAAA,CAAC;AACJ;;AACD,UAAIA,CAAC,GAAGC,CAAR,EAAW;AACPM,QAAAA,IAAI,CAACV,SAAS,CAACG,CAAD,CAAV,EAAeH,SAAS,CAACI,CAAD,CAAxB,CAAJ;AACAD,QAAAA,CAAC;AACJ;;AACD,UAAIA,CAAC,GAAGC,CAAR,EAAW;AACPM,QAAAA,IAAI,CAACV,SAAS,CAACG,CAAD,CAAV,EAAeH,SAAS,CAACI,CAAD,CAAxB,CAAJ;AACAD,QAAAA,CAAC;AACJ;AACJ;;AACDJ,IAAAA,eAAe,CAACC,SAAD,EAAYC,QAAZ,EAAsBE,CAAtB,CAAf;AACAJ,IAAAA,eAAe,CAACC,SAAD,EAAYI,CAAZ,EAAeO,KAAf,CAAf;AACH;;AACD,MAAIV,QAAQ,KAAKC,MAAjB,EAAyB,OA1B3B,CA0BmC;;AACjC,QAAMU,SAAS,GAAGL,IAAI,CAACC,KAAL,CAAW,CAACP,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB,CA3BF,CA2ByD;;AAEvDH,EAAAA,eAAe,CAACF,cAAD,EAAiBI,QAAjB,EAA2BW,SAA3B,EAAsCZ,SAAtC,EAAiDL,UAAjD,CAAf;AACAI,EAAAA,eAAe,CAACF,cAAD,EAAiBe,SAAS,GAAG,CAA7B,EAAgCV,MAAhC,EAAwCF,SAAxC,EAAmDL,UAAnD,CAAf;AAEH","sourcesContent":["export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    quickSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations\r\n}\r\n\r\nfunction quickSortHelper(\r\n    mainArray,\r\n    startIdx, // left\r\n    endIdx, // right\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    var l = startIdx;\r\n    var r = endIdx - 1;\r\n    var size = endIdx - startIdx; // getting the size\r\n\r\n    if (size > 1) {\r\n        var pivot = mainArray[Math.floor(Math.random() % size + l)];\r\n        while (l < r) {\r\n            while (mainArray[r] > pivot && r > l) {\r\n                r--;\r\n            }\r\n            while (mainArray[l] < pivot && l <= r) {\r\n                l++;\r\n            }\r\n            if (l < r) {\r\n                swap(mainArray[l], mainArray[r]);\r\n                l++;\r\n            }\r\n            if (l < r) {\r\n                swap(mainArray[l], mainArray[r]);\r\n                l++;\r\n            }\r\n        }\r\n        quickSortHelper(mainArray, startIdx, l);\r\n        quickSortHelper(mainArray, r, right);\r\n    }\r\n    if (startIdx === endIdx) return; // If we have same index, that means only one array, return the function\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2); // Our pivot\r\n\r\n    quickSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    quickSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}