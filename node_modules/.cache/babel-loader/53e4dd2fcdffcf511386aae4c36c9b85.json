{"ast":null,"code":"export function getQuickSortAnimations(arr) {\n  const animations = [];\n  if (arr.length <= 1) return animations; /// deep copy the array without copying the color field\n\n  const aux = new Array(arr.length);\n\n  for (let i = 0; i < arr.length; ++i) aux[i] = arr[i].height;\n\n  quickSort(aux, 0, aux.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(arr, left, right, animations) {\n  if (left < right) {\n    const index = partition(arr, left, right, animations);\n    quickSort(arr, left, index - 1, animations);\n    quickSort(arr, index + 1, right, animations);\n  }\n}\n\nfunction partition(arr, left, right, animations) {\n  /// 'color' means we change the color of the two indexes in the main array\n  /// 'revert' means we revert the color change\n  /// 'swap' means we swap the two indexes in the main array\n  let index = left;\n  const pivot = arr[right];\n\n  for (let i = left; i < right; ++i) {\n    animations.push([index, i, 'color']);\n    animations.push([index, i, 'revert']);\n\n    if (arr[i] <= pivot) {\n      animations.push([index, i, 'swap']);\n      [arr[index], arr[i]] = [arr[i], arr[index]];\n      index++;\n    }\n  }\n\n  animations.push([index, right, 'color']);\n  animations.push([index, right, 'revert']);\n  animations.push([index, right, 'swap']);\n  [arr[index], arr[right]] = [arr[right], arr[index]];\n  return index;\n}","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/sortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","arr","animations","length","aux","Array","i","height","quickSort","left","right","index","partition","pivot","push"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,GAAhC,EAAqC;AAExC,QAAMC,UAAU,GAAG,EAAnB;AAEA,MAAGD,GAAG,CAACE,MAAJ,IAAc,CAAjB,EACI,OAAOD,UAAP,CALoC,CAOxC;;AACA,QAAME,GAAG,GAAG,IAAIC,KAAJ,CAAUJ,GAAG,CAACE,MAAd,CAAZ;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAAGL,GAAG,CAACE,MAAtB,EAA6B,EAAEG,CAA/B,EACIF,GAAG,CAACE,CAAD,CAAH,GAASL,GAAG,CAACK,CAAD,CAAH,CAAOC,MAAhB;;AAEJC,EAAAA,SAAS,CAACJ,GAAD,EAAM,CAAN,EAASA,GAAG,CAACD,MAAJ,GAAa,CAAtB,EAAyBD,UAAzB,CAAT;AACA,SAAOA,UAAP;AACH;;AAED,SAASM,SAAT,CAAmBP,GAAnB,EAAwBQ,IAAxB,EAA8BC,KAA9B,EAAqCR,UAArC,EAAiD;AAC7C,MAAGO,IAAI,GAAGC,KAAV,EAAiB;AACb,UAAMC,KAAK,GAAGC,SAAS,CAACX,GAAD,EAAMQ,IAAN,EAAYC,KAAZ,EAAmBR,UAAnB,CAAvB;AACAM,IAAAA,SAAS,CAACP,GAAD,EAAMQ,IAAN,EAAYE,KAAK,GAAG,CAApB,EAAuBT,UAAvB,CAAT;AACAM,IAAAA,SAAS,CAACP,GAAD,EAAMU,KAAK,GAAG,CAAd,EAAiBD,KAAjB,EAAwBR,UAAxB,CAAT;AACH;AACJ;;AAED,SAASU,SAAT,CAAmBX,GAAnB,EAAwBQ,IAAxB,EAA8BC,KAA9B,EAAqCR,UAArC,EAAiD;AAE7C;AACA;AACA;AAEA,MAAIS,KAAK,GAAGF,IAAZ;AACA,QAAMI,KAAK,GAAGZ,GAAG,CAACS,KAAD,CAAjB;;AAEA,OAAI,IAAIJ,CAAC,GAAGG,IAAZ,EAAkBH,CAAC,GAAGI,KAAtB,EAA4B,EAAEJ,CAA9B,EAAiC;AAC7BJ,IAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQL,CAAR,EAAW,OAAX,CAAhB;AACAJ,IAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQL,CAAR,EAAU,QAAV,CAAhB;;AAEA,QAAGL,GAAG,CAACK,CAAD,CAAH,IAAUO,KAAb,EAAoB;AAChBX,MAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQL,CAAR,EAAW,MAAX,CAAhB;AACA,OAACL,GAAG,CAACU,KAAD,CAAJ,EAAaV,GAAG,CAACK,CAAD,CAAhB,IAAuB,CAACL,GAAG,CAACK,CAAD,CAAJ,EAASL,GAAG,CAACU,KAAD,CAAZ,CAAvB;AACAA,MAAAA,KAAK;AACR;AACJ;;AAEDT,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,OAAf,CAAhB;AACAR,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,QAAf,CAAhB;AACAR,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAACH,KAAD,EAAQD,KAAR,EAAe,MAAf,CAAhB;AAEA,GAACT,GAAG,CAACU,KAAD,CAAJ,EAAaV,GAAG,CAACS,KAAD,CAAhB,IAA2B,CAACT,GAAG,CAACS,KAAD,CAAJ,EAAaT,GAAG,CAACU,KAAD,CAAhB,CAA3B;AACA,SAAOA,KAAP;AACH","sourcesContent":["export function getQuickSortAnimations(arr) {\r\n\r\n    const animations = [];\r\n\r\n    if(arr.length <= 1)\r\n        return animations;\r\n\r\n    /// deep copy the array without copying the color field\r\n    const aux = new Array(arr.length);\r\n    for(let i = 0;i < arr.length;++i)\r\n        aux[i] = arr[i].height;\r\n\r\n    quickSort(aux, 0, aux.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(arr, left, right, animations) {\r\n    if(left < right) {\r\n        const index = partition(arr, left, right, animations);\r\n        quickSort(arr, left, index - 1, animations);\r\n        quickSort(arr, index + 1, right, animations);\r\n    }\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n\r\n    /// 'color' means we change the color of the two indexes in the main array\r\n    /// 'revert' means we revert the color change\r\n    /// 'swap' means we swap the two indexes in the main array\r\n\r\n    let index = left;\r\n    const pivot = arr[right];\r\n\r\n    for(let i = left; i < right;++i) {\r\n        animations.push([index, i, 'color']);\r\n        animations.push([index, i,'revert']);\r\n\r\n        if(arr[i] <= pivot) {\r\n            animations.push([index, i, 'swap']);\r\n            [arr[index], arr[i]] = [arr[i], arr[index]];\r\n            index++;\r\n        }\r\n    }\r\n\r\n    animations.push([index, right, 'color']);\r\n    animations.push([index, right, 'revert']);\r\n    animations.push([index, right, 'swap']);\r\n\r\n    [arr[index], arr[right]] = [arr[right], arr[index]];\r\n    return index;\r\n}"]},"metadata":{},"sourceType":"module"}