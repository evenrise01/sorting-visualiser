{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\ITS Project\\\\Sorting-Visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/SelectionSort.js';\nimport './SortingVisualizer.css'; // Value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 2; // Value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730)); //if we use 1 instead of 5, we will barely see it on the screen, Also duplicate values are allowed\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      let min = i;\n      setTimeout(() => {\n        animations[i].style.backgroundColor = SECONDARY_COLOR;\n\n        for (let j = i + 1; j < animations.length; j++) {\n          if (arrayBars[j].clientHeight < arrayBars[min].clientHeight) {\n            min = j;\n          }\n        }\n\n        let tmp = arrayBars[i].clientHeight;\n        arrayBars[i].style.height = `${arrayBars[min].clientHeight}px`;\n        arrayBars[min].style.height = `${tmp}px`;\n      }, i * ANIMATION_SPEED_MS); // animations.push([i, min]);\n\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n  }\n\n  bubbleSort() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      let j;\n      setTimeout(() => {\n        for (j = 0; j < arrayBars.length - 1 - i; j++) {\n          if (arrayBars[j + 1].clientHeight < arrayBars[j].clientHeight) {\n            let tmp = arrayBars[j + 1].clientHeight;\n            arrayBars[j + 1].style.height = `${arrayBars[j].clientHeight}px`;\n            arrayBars[j].style.height = `${tmp}px`;\n          }\n        }\n\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  insertionSort() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 1; i < arrayBars.length; i++) {\n      let v = arrayBars[i].clientHeight;\n      let j = i - 1;\n      setTimeout(() => {\n        while (j >= 0 && arrayBars[j].clientHeight > v) {\n          arrayBars[j + 1].style.height = `${arrayBars[j].clientHeight}px`;\n          arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n          j = j - 1;\n        }\n\n        arrayBars[j + 1].style.height = `${v}px`; // arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.SelectionSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, \"Selection Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }","map":{"version":3,"sources":["D:/Study/ITS Project/Sorting-Visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getSelectionSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","selectionSort","min","j","clientHeight","tmp","bubbleSort","insertionSort","v","quickSort","heapSort","render","map","value","idx","SelectionSort","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/SelectionSort.js';\n\nimport './SortingVisualizer.css';\n\n// Value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 2;\n\n// Value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730)); //if we use 1 instead of 5, we will barely see it on the screen, Also duplicate values are allowed\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      let min = i;\n\n      setTimeout(() => {\n        animations[i].style.backgroundColor = SECONDARY_COLOR;\n        for (let j = i + 1; j < animations.length; j++) {\n          if (arrayBars[j].clientHeight < arrayBars[min].clientHeight) {\n            min = j\n          }\n        }\n        let tmp = arrayBars[i].clientHeight;\n        arrayBars[i].style.height = `${arrayBars[min].clientHeight}px`;\n        arrayBars[min].style.height = `${tmp}px`;\n\n      }, i * ANIMATION_SPEED_MS);\n\n      // animations.push([i, min]);\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n  }\n\n  bubbleSort() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < arrayBars.length; i++) {\n      let j\n      setTimeout(() => {\n        for (j = 0; j < arrayBars.length - 1 - i; j++) {\n          if (arrayBars[j + 1].clientHeight < arrayBars[j].clientHeight) {\n            let tmp = arrayBars[j + 1].clientHeight;\n            arrayBars[j + 1].style.height = `${arrayBars[j].clientHeight}px`;\n            arrayBars[j].style.height = `${tmp}px`;\n\n\n          }\n        }\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n\n\n      }, i * ANIMATION_SPEED_MS);\n\n\n    }\n  }\n\n  insertionSort() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 1; i < arrayBars.length; i++) {\n      let v = arrayBars[i].clientHeight;\n      let j = i - 1;\n      setTimeout(() => {\n        while (j >= 0 && arrayBars[j].clientHeight > v) {\n          arrayBars[j + 1].style.height = `${arrayBars[j].clientHeight}px`;\n          arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n          j = j - 1;\n\n        }\n        arrayBars[j + 1].style.height = `${v}px`\n        // arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n\n    }\n  }\n  quickSort() {\n  }\n\n  heapSort() {\n  }\n\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.SelectionSort()}>Selection Sort</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}